DF02
str(DF02)
url <- paste(searchUrl,"?ServiceKey=",serviceKey,"&numOfRows=10000","&pageNo=1",
"&birth=1998",sep="")
xmlfile <- xmlParse(url)
xmltop <- xmlRoot(xmlfile)
DF02 <- xmlToDataFrame(getNodeSet(xmltop,"//item"))
str(DF02)
? data.frame
c <- data.frame("c"=c(1,2,3))
c
comp <- data.frame("S"=c(165:175,rep=0.1))
comp
? rep
c <- rep(165:175,0.1)
c
c <- rep(165:175,times=0.1)
c
c <- c(rep(165:175,0.1))
c
rep(165:175,0.1)
rep(165:175)
rep(165:175,times=0.1)
rep(165:175,times=11)
comp <- data.frame("S"=seq(from=165,to=175,by=0.1))
comp
DF02 <- DF02[,c(4,11)]
plot(DF02$weight ~ DF02$height)
plot(DF02)
plot(DFcha5, main="5차와 7차의 선형회기 직선 시각화")
plot(DF02$weight,DF02$height)
DF02 <- DF02[,c(4,11)]
plot(lm(weight ~ height, DF02),which=c(1))
abline(coef(lm(weight ~ height, DF02)))
sapply(DF02,class)
DF02 <- as.numeric(DF02)
DF02 <- data.frame(as.numeric(DF02$weight),as.numeric(DF02$height))
sapply(DF02,class)
DF02 <- xmlToDataFrame(getNodeSet(xmltop,"//item"))
str(DF02)
DF021 <- DF02
DF02 <- DF02[,c(4,11)]
DF02 <- data.frame(as.numeric(DF02$height),as.numeric(DF02$weight))
names(DF02) <- c("height","weight")
plot(lm(weight ~ height, DF02),which=c(1))
abline(coef(lm(weight ~ height, DF02)))
sapply(DF02,class)
plot(DF02)
abline(coef(lm(weight ~ height, DF02)))
View(DF021)
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
DF02 <- data.frame(as.numeric(DF02$height),as.numeric(DF02$weight))
names(DF02) <- c("height","weight")
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
DF02 <- data.frame(as.numeric(DF02$height),as.numeric(DF02$weight))
DF02 <- as.numeric(DF02)
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
DF02$height <- as.numeric(DF02$height)
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
DF021 <- xmlToDataFrame(getNodeSet(xmltop,"//item"),stringsAsFactors=F)
str(DF021)
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
sapply(DF02,class)
DF02$height <- as.numeric(DF02$height)
DF02$weight <- as.numeric(DF02$weight)
sapply(DF02,class)
plot(lm(weight ~ height, DF02),which=c(1))
plot(DF02)
abline(coef(lm(weight ~ height, DF02)))
abline(coef(lm(weight ~ height, DFcha7)))
plot(DF02)
abline(coef(lm(weight ~ height, DF02)))
abline(coef(lm(weight ~ height, DFcha5)))
plot(DF02, main="징병검사 신체정보 선형회기 그래프")
abline(coef(lm(weight ~ height, DF02)))
abline(coef(lm(weight ~ height, DFcha5)))
boxplot(DF02, main="징병검사 신체정보 선형회기 그래프")
ggplot(data=DF02,aes(x=weight,y=height,colour=clarity)) + geom_point() + theme_wsj()
library(ggplot2)
library(ggthemes)
ggplot(data=DF02,aes(x=weight,y=height,colour=clarity)) + geom_point() + theme_wsj()
update.packages("ggplot2")
update.packages("ggthemes")
library(ggplot2)
library(ggthemes)
ggplot(data=DF02,aes(x=weight,y=height,colour=clarity)) + geom_point() + theme_wsj()
ggplot(data=DF02,aes(x=weight,y=height,colour=clarity)) + geom_point() + theme_wsj()
? ggplot
? ggplot2
? ggplot
ggplot(data=DF02,aes(x=weight,y=height,colour='clarity')) + geom_point() + theme_wsj()
abline(coef(lm(weight ~ height, DF02)))
abline(coef(lm(weight ~ height, DFcha5)))
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
)
library(manipulate)
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
)
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
)
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
, main="징병검사 신체정보 선형회기 그래프"
)
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
, title(main="dd")
)
cut(DF02$height,breaks=4)
mean(cut(DF02$height,breaks=4))
sapply(cut(DF02$height,breaks=4),mean)
sapply(as.numeric(cut(DF02$height,breaks=4)),mean)
library(doBy)
summaryBy(cut(DF02$height,breaks=4))
cut(DF02$height,breaks=4)
table(cut(DF02$height,breaks=4))
V02 <- table(cut(DF02$height,breaks=4))
library(Rcpp)
library("rCharts")
library(devtools)
DF022 <- as.data.frame(DF022)
DF022 <- table(cut(DF02$height,breaks=4))
DF022 <- as.data.frame(DF022)
DF022
names(DF022) <- c("height","counts")
DF022
V01 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart")
V01
? nPlot
? nPlot()
V02 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart", main="dd")
V02 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart", main="dd")
V02 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart")
V02 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart", main="dddd")
V02
V02 <- nPlot(counts ~ height, data=DF022, group="height", type="multiBarHorizontalChart")
V02
V02
DF023 <- table(cut(DF02$weight,breaks=4))
DF023 <- as.data.frame(DF022)
names(DF023) <- c("weight","counts")
DF023
DF023 <- table(cut(DF02$weight,breaks=4))
DF023 <- as.data.frame(DF022)
names(DF023) <- c("weight","counts")
DF023
DF02 <- DF021
DF02 <- DF02[,c(4,11)]
sapply(DF02,class)
DF02$height <- as.numeric(DF02$height)
DF02$weight <- as.numeric(DF02$weight)
plot(lm(weight ~ height, DF02),which=c(1))
plot(DF02, main="징병검사 신체정보 선형회기 그래프")
abline(coef(lm(weight ~ height, DF02)))
abline(coef(lm(weight ~ height, DFcha5)))
DF023 <- table(cut(DF02$weight,breaks=4))
DF023 <- as.data.frame(DF022)
names(DF023) <- c("weight","counts")
DF023
V03 <- nPlot(counts ~ weight, data=DF023, group="weight", type="multiBarHorizontalChart")
V03
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
)
manipulate(
plot( weight ~ height, data=DF02
, axes=axes
, cex=cex
, pch=if(pch) 19 else 1)
, axes=checkbox(TRUE, "Show axes")
, cex=slider(0,5,initial=1,step=0.1,label="Point size")
, pch=button("Fill points")
)
library(ggplot2)
library(ggthemes)
ggplot(data=DF02,aes(x=weight,y=height,colour='clarity')) + geom_point() + theme_wsj()
ggplot(data=DF02,aes(x=weight,y=height)) + geom_smooth(method="lm")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
? getURL
library(RCurl)
library(RCurl)
library(XML)
library(KoNLP)
library(RColorBrewer)
library(wordcloud)
install.packages("wordcloud")
library(ggmap)
addr <- c("서울특별시 중구 명동",
"서울특별시 강남구 영동대로 513",
"서울특별시 영등포구 국제금융로 10",
"서울특별시 광진구 아차산로 200",
"서울특별시 영등포구 영중로 15")
name <- c("a","b","c","d","e")
gc <- geocode(enc2utf8(addr))
df <- data.frame(name,gc$lon,gc$lat)
View(df)
center <- c(mean(gc$lon),mean(gc$lat))
gc
DF03 <- cbind(name,gc)
DF03
name <- c("명동쇼핑스트리트","코엑스몰","IFC몰","커먼그라운드","영등포타임스퀘어")
gc <- geocode(enc2utf8(addr))
DF03 <- cbind(name,gc)
DF03
center <- c(mean(gc$lon),mean(gc$lat))
map <- get_googlemap(center=center,maptype="roadmap",zoom=10,marker=gc)
gc <- geocode(enc2utf8(addr))
DF05 <- cbind(name,gc)
DF05
center <- c(mean(gc$lon),mean(gc$lat))
map <- get_googlemap(center=center,maptype="roadmap",zoom=10,marker=gc)
? ggmap
namecolor <- DF05[,4]
gc <- geocode(enc2utf8(addr))
DF05 <- cbind(name,gc)
DF05
center <- c(mean(gc$lon),mean(gc$lat))
namecolor <- DF05[,4]*10
namecolor <- DF05[,1]*10
namecolor <- DF05[,1]
color <- as.integer(namecolor)*10
map <- get_googlemap(center=center,maptype="roadmap",zoom=10,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V05
map <- get_googlemap(center=center,maptype="roadmap",zoom=12,marker=gc)
? get_googlemap()
map <- get_googlemap(center=center,maptype="roadmap",zoom=12,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V05
map <- get_googlemap(center=center,maptype="roadmap",zoom=11,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V05
? get_googlemap()
V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, +0.001, label=DF05$name), size=2)
V05
V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=2)
V05
V051
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=2)
V051
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=5)
V051
map <- get_googlemap(center=center,maptype="roadmap",zoom=12,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V05
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=5)
V051
V051
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V051
V05
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=5)
map <- get_googlemap(center=center,maptype="roadmap",zoom=12,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V05
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=5)
V051
getwd()
setwd("D:/Klaus Choi/KLAUS/2017_start/R/Instruction Elements/Final/Final exam")
ggsave("map.png")
ggsave("map.png",dpi=500)
library(ggmap)
library(ggplot2)
addr <- c("서울특별시 중구 명동",
"서울특별시 강남구 영동대로 513",
"서울특별시 영등포구 국제금융로 10",
"서울특별시 광진구 아차산로 200",
"서울특별시 영등포구 영중로 15",
"서울특별시 강남구 신사동",
"서울특별시 서초구 반포동",
"서울특별시 중구 을지로 281")
name <- c("명동쇼핑스트리트","코엑스몰","IFC몰","커먼그라운드","영등포타임스퀘어"
, "가로수길", "파미에스테이션", "동대문디자인플라자")
gc <- geocode(enc2utf8(addr))
DF05 <- cbind(name,gc)
DF05
gc <- geocode(enc2utf8(addr))
DF05 <- cbind(name,gc)
DF05
center <- c(mean(gc$lon),mean(gc$lat))
namecolor <- DF05[,1]
color <- as.integer(namecolor)*10
map <- get_googlemap(center=center,maptype="roadmap",zoom=12,marker=gc)
V05 <- ggmap(map,extent = "device") + geom_point(data=DF05, aes(x=DF05$lon, y=DF05$lat)
, size=2, alpha=0.7, color=color)
V051 <- V05 + geom_text(data=DF05, aes(x=DF05$lon, y=DF05$lat, label=DF05$name), size=5)
V051
library(twitterR)
install.packages("KoNLP")
install.packages("base64enc")
install.packages("twitterR")
install.packages("twitterR",dependencies=T)
install.packages("twitteR")
library(twitteR)
library(base64enc)
library(KoNLP)
library(RColorBrewer)
library(wordcloud2)
options(httr_oauth_cache = T)
setup_twitter_oauth(
consumer_key = "NHY572m33si1HywHV31TS2L4D",
consumer_secret = "CVLbp6eEq7ta2Fy3ic6pJ5L5ELrTAaDDS6LthysAeyj988n7NW",
access_token = "412876876-SWNM2OE3MiVlkhu6eY4fdpMq7R599aBUmXPLheUW",
access_secret = "JY0ymGg3TpOORYQMIHZ6uLxW5Km4CsT86DDFWuiTaOjfk"
)
keyword <- enc2utf8("커먼그라운드")
tweets <- searchTwitter(keyword,n=100,retryOnRateLimit=10000)
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
tweets <- searchTwitter(keyword,n=100,retryOnRateLimit=1)
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
text_ex <- sapply(tweets,function(t){t$getText()})
text_ex
tweets <- searchTwitter(keyword,n=10,retryOnRateLimit=1)
text_ex <- sapply(tweets,function(t){t$getText()})
text_ex
tweets <- searchTwitter(keyword,n=1000,retryOnRateLimit=1)
tweets
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
tweets_DF <- twListToDF(tweets)
tweets_DF$text
useSejongDic()
noun <- sapply(tweets_DF$text, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun)
noun2 <- Filter(function(x){nchar(x)>=2},noun2)
noun2 <- gsub('\\d+', '', noun2)
noun2 <- gsub('</b>', '', noun2)
noun2 <- gsub('<b>', '', noun2)
noun2 <- gsub('&amp', '', noun2)
noun2 <- gsub('&lt', '', noun2)
noun2 <- gsub('&gt', '', noun2)
noun2 <- gsub('&quot', '', noun2)
noun2 <- gsub("", '', noun2)
noun2 <- gsub('\'', '', noun2)
noun2 <- gsub(' ', '', noun2)
noun2 <- gsub('-', '', noun2)
noun2 <- gsub('https', '', noun2)
noun2 <- gsub('RT', '', noun2)
wordcount <- table(noun2)
barplot(wordcount)
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=1,
random.order=F, random.color=T, colors=palete)
library(wordcloud)
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=1,
random.order=F, random.color=T, colors=palete)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=1,
random.order=F, random.color=T, colors=palete)
barplot(wordcount)
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=30,
random.order=F, random.color=T, colors=palete)
keyword <- enc2utf8("코엑스몰")
tweets <- searchTwitter(keyword,n=1000,retryOnRateLimit=1)
tweets
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
tweets_DF <- twListToDF(tweets)
tweets_DF$text
useSejongDic()
noun <- sapply(tweets_DF$text, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun)
noun2 <- Filter(function(x){nchar(x)>=2},noun2)
noun2 <- gsub('\\d+', '', noun2)
noun2 <- gsub('</b>', '', noun2)
noun2 <- gsub('<b>', '', noun2)
noun2 <- gsub('&amp', '', noun2)
noun2 <- gsub('&lt', '', noun2)
noun2 <- gsub('&gt', '', noun2)
noun2 <- gsub('&quot', '', noun2)
noun2 <- gsub("", '', noun2)
noun2 <- gsub('\'', '', noun2)
noun2 <- gsub(' ', '', noun2)
noun2 <- gsub('-', '', noun2)
noun2 <- gsub('https', '', noun2)
noun2 <- gsub('RT', '', noun2)
wordcount <- table(noun2)
barplot(wordcount)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=30,
random.order=F, random.color=T, colors=palete)
keyword <- enc2utf8("커먼그라운드")
tweets <- searchTwitter(keyword,n=100,retryOnRateLimit=1)
tweets
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
tweets_DF <- twListToDF(tweets)
tweets_DF$text
useSejongDic()
noun <- sapply(tweets_DF$text, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun)
noun2 <- Filter(function(x){nchar(x)>=2},noun2)
noun2 <- gsub('\\d+', '', noun2)
noun2 <- gsub('</b>', '', noun2)
noun2 <- gsub('<b>', '', noun2)
noun2 <- gsub('&amp', '', noun2)
noun2 <- gsub('&lt', '', noun2)
noun2 <- gsub('&gt', '', noun2)
noun2 <- gsub('&quot', '', noun2)
noun2 <- gsub("", '', noun2)
noun2 <- gsub('\'', '', noun2)
noun2 <- gsub(' ', '', noun2)
noun2 <- gsub('-', '', noun2)
noun2 <- gsub('https', '', noun2)
noun2 <- gsub('RT', '', noun2)
wordcount <- table(noun2)
barplot(wordcount)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=30,
random.order=F, random.color=T, colors=palete)
barplot(wordcount)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=1,
random.order=F, random.color=T, colors=palete)
keyword <- enc2utf8("빅사이즈옷매장")
tweets <- searchTwitter(keyword,n=100,retryOnRateLimit=1)
keyword <- enc2utf8("커먼그라운드")
tweets <- searchTwitter(keyword,n=100,retryOnRateLimit=1)
tweets
? searchTwitter()
keyword <- enc2utf8("커먼그라운드")
tweets <- searchTwitter(keyword,n=1000,resultType="popular", retryOnRateLimit=100)
tweets
tweets <- searchTwitter(keyword,n=1000, resultType="recent", retryOnRateLimit=100)
tweets
text_ex <- sapply(tweets,function(t) t$getText())
text_ex
tweets_DF <- twListToDF(tweets)
tweets_DF$text
useSejongDic()
noun <- sapply(tweets_DF$text, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun)
noun2 <- Filter(function(x){nchar(x)>=2},noun2)
noun2 <- gsub('\\d+', '', noun2)
noun2 <- gsub('</b>', '', noun2)
noun2 <- gsub('<b>', '', noun2)
noun2 <- gsub('&amp', '', noun2)
noun2 <- gsub('&lt', '', noun2)
noun2 <- gsub('&gt', '', noun2)
noun2 <- gsub('&quot', '', noun2)
noun2 <- gsub("", '', noun2)
noun2 <- gsub('\'', '', noun2)
noun2 <- gsub(' ', '', noun2)
noun2 <- gsub('-', '', noun2)
noun2 <- gsub('https', '', noun2)
noun2 <- gsub('RT', '', noun2)
wordcount <- table(noun2)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq=wordcount,
scale=c(8,1), rot.per=0.45, min.freq=1,
random.order=F, random.color=T, colors=palete)
